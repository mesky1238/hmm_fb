// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// sweep_add
Eigen::MatrixXd sweep_add(const Eigen::MatrixXd& A, const Eigen::VectorXd& alpha);
RcppExport SEXP _hmmfb_sweep_add(SEXP ASEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(sweep_add(A, alpha));
    return rcpp_result_gen;
END_RCPP
}
// sweep_add_logexp
Eigen::ArrayXd sweep_add_logexp(const Eigen::MatrixXd& A, const Eigen::VectorXd& alpha);
RcppExport SEXP _hmmfb_sweep_add_logexp(SEXP ASEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(sweep_add_logexp(A, alpha));
    return rcpp_result_gen;
END_RCPP
}
// logsumexp
double logsumexp(const Eigen::ArrayXd& x);
RcppExport SEXP _hmmfb_logsumexp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::ArrayXd& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(logsumexp(x));
    return rcpp_result_gen;
END_RCPP
}
// efbiter
Eigen::ArrayXd efbiter(Eigen::MatrixXd A, Eigen::ArrayXd alpha, Eigen::ArrayXd B);
RcppExport SEXP _hmmfb_efbiter(SEXP ASEXP, SEXP alphaSEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXd >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXd >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(efbiter(A, alpha, B));
    return rcpp_result_gen;
END_RCPP
}
// cpp_cumsum
Eigen::ArrayXi cpp_cumsum(Eigen::ArrayXi x);
RcppExport SEXP _hmmfb_cpp_cumsum(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::ArrayXi >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_cumsum(x));
    return rcpp_result_gen;
END_RCPP
}
// gen_bt
Eigen::ArrayXi gen_bt(const Eigen::MatrixXd& linit, const Eigen::MatrixXd& lA, const Eigen::MatrixXd& B, Eigen::ArrayXi ntimes);
RcppExport SEXP _hmmfb_gen_bt(SEXP linitSEXP, SEXP lASEXP, SEXP BSEXP, SEXP ntimesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type linit(linitSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type lA(lASEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type B(BSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXi >::type ntimes(ntimesSEXP);
    rcpp_result_gen = Rcpp::wrap(gen_bt(linit, lA, B, ntimes));
    return rcpp_result_gen;
END_RCPP
}
// forward_rcpp
Rcpp::List forward_rcpp(const Eigen::MatrixXd& linit, const Eigen::MatrixXd& lA, const Eigen::MatrixXd& B, Eigen::ArrayXi ntimes, bool return_all);
RcppExport SEXP _hmmfb_forward_rcpp(SEXP linitSEXP, SEXP lASEXP, SEXP BSEXP, SEXP ntimesSEXP, SEXP return_allSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type linit(linitSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type lA(lASEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type B(BSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXi >::type ntimes(ntimesSEXP);
    Rcpp::traits::input_parameter< bool >::type return_all(return_allSEXP);
    rcpp_result_gen = Rcpp::wrap(forward_rcpp(linit, lA, B, ntimes, return_all));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_hmmfb_sweep_add", (DL_FUNC) &_hmmfb_sweep_add, 2},
    {"_hmmfb_sweep_add_logexp", (DL_FUNC) &_hmmfb_sweep_add_logexp, 2},
    {"_hmmfb_logsumexp", (DL_FUNC) &_hmmfb_logsumexp, 1},
    {"_hmmfb_efbiter", (DL_FUNC) &_hmmfb_efbiter, 3},
    {"_hmmfb_cpp_cumsum", (DL_FUNC) &_hmmfb_cpp_cumsum, 1},
    {"_hmmfb_gen_bt", (DL_FUNC) &_hmmfb_gen_bt, 4},
    {"_hmmfb_forward_rcpp", (DL_FUNC) &_hmmfb_forward_rcpp, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_hmmfb(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
